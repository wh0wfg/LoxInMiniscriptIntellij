// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: MloxLexer.flex

package indi.wh0wfg.mlox.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import indi.wh0wfg.mlox.language.psi.MloxTokenTypes;


public class MloxLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\2\0"+
    "\1\5\2\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\12\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\0\32\25\1\26\1\27\1\30\1\0\1\25"+
    "\1\0\1\31\1\32\1\33\1\34\1\35\1\36\1\25"+
    "\1\37\1\40\1\25\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\25\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\25\1\55\1\25\1\56\1\57\1\60\7\0\1\61"+
    "\u01a2\0\2\61\326\0\u0100\61";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\20\24\1\27\1\30\1\31\1\32\1\0\1\33\1\0"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\0\1\42"+
    "\1\43\1\44\6\24\1\45\5\24\1\46\1\24\1\47"+
    "\2\24\1\50\10\24\1\15\1\51\11\24\1\52\1\53"+
    "\2\24\1\54\7\24\1\55\1\56\2\24\1\57\4\24"+
    "\1\60\11\24\1\61\1\24\1\62\1\24\1\63\1\64"+
    "\1\65\2\24\1\66\4\24\1\67\1\24\1\70\1\24"+
    "\1\71\1\72\4\24\1\73\1\74\1\75\1\76\1\24"+
    "\1\77\1\100\1\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\62\0\62"+
    "\0\u012c\0\u015e\0\62\0\u0190\0\62\0\u01c2\0\u01f4\0\62"+
    "\0\62\0\u0226\0\u0258\0\u028a\0\62\0\u02bc\0\62\0\62"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc"+
    "\0\62\0\62\0\62\0\62\0\310\0\62\0\u060e\0\62"+
    "\0\62\0\62\0\62\0\u0640\0\62\0\u0672\0\62\0\62"+
    "\0\62\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u02bc"+
    "\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u02bc\0\u08ca\0\u02bc"+
    "\0\u08fc\0\u092e\0\u02bc\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0abe\0\u0672\0\u02bc\0\u0af0\0\u0b22\0\u0b54"+
    "\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u02bc"+
    "\0\u0ce4\0\u0d16\0\u02bc\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u02bc\0\u02bc\0\u0ea6\0\u0ed8\0\u02bc\0\u0f0a"+
    "\0\u0f3c\0\u0f6e\0\u0fa0\0\u02bc\0\u0fd2\0\u1004\0\u1036\0\u1068"+
    "\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u02bc\0\u1194\0\u02bc"+
    "\0\u11c6\0\u02bc\0\u02bc\0\u02bc\0\u11f8\0\u122a\0\u02bc\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u02bc\0\u1324\0\u02bc\0\u1356\0\u02bc"+
    "\0\u02bc\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u02bc\0\u02bc\0\u02bc"+
    "\0\u02bc\0\u1450\0\u02bc\0\u02bc\0\u02bc\0\u02bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\2\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\26\1\37"+
    "\1\26\1\40\1\26\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\26\1\47\1\50\1\26\1\51\1\52\1\53"+
    "\1\2\63\0\2\3\101\0\1\54\37\0\4\55\1\56"+
    "\22\55\1\57\32\55\22\0\1\60\61\0\1\61\61\0"+
    "\1\62\61\0\1\63\54\0\1\64\4\0\1\65\53\0"+
    "\1\66\1\0\1\17\65\0\1\67\61\0\1\70\61\0"+
    "\1\71\55\0\1\26\6\0\1\26\3\0\25\26\22\0"+
    "\1\26\6\0\1\26\3\0\13\26\1\72\11\26\22\0"+
    "\1\26\6\0\1\26\3\0\16\26\1\73\6\26\22\0"+
    "\1\26\6\0\1\26\3\0\1\74\10\26\1\75\2\26"+
    "\1\76\10\26\22\0\1\26\6\0\1\26\3\0\4\26"+
    "\1\77\7\26\1\100\10\26\22\0\1\26\6\0\1\26"+
    "\3\0\11\26\1\101\13\26\22\0\1\26\6\0\1\26"+
    "\3\0\1\102\6\26\1\103\4\26\1\104\4\26\1\105"+
    "\3\26\22\0\1\26\6\0\1\26\3\0\5\26\1\106"+
    "\4\26\1\107\1\110\11\26\22\0\1\26\6\0\1\26"+
    "\3\0\1\111\24\26\22\0\1\26\6\0\1\26\3\0"+
    "\7\26\1\112\15\26\22\0\1\26\6\0\1\26\3\0"+
    "\16\26\1\113\6\26\22\0\1\26\6\0\1\26\3\0"+
    "\16\26\1\114\6\26\22\0\1\26\6\0\1\26\3\0"+
    "\4\26\1\115\20\26\22\0\1\26\6\0\1\26\3\0"+
    "\21\26\1\116\1\26\1\117\1\26\22\0\1\26\6\0"+
    "\1\26\3\0\6\26\1\120\7\26\1\121\6\26\22\0"+
    "\1\26\6\0\1\26\3\0\1\122\24\26\22\0\1\26"+
    "\6\0\1\26\3\0\6\26\1\123\16\26\4\0\2\55"+
    "\1\0\56\55\1\0\2\64\1\0\56\64\17\0\1\124"+
    "\61\0\1\26\6\0\1\26\3\0\3\26\1\125\21\26"+
    "\22\0\1\26\6\0\1\26\3\0\4\26\1\126\20\26"+
    "\22\0\1\26\6\0\1\26\3\0\17\26\1\127\1\130"+
    "\4\26\22\0\1\26\6\0\1\26\3\0\1\131\24\26"+
    "\22\0\1\26\6\0\1\26\3\0\13\26\1\132\11\26"+
    "\22\0\1\26\6\0\1\26\3\0\5\26\1\133\17\26"+
    "\22\0\1\26\6\0\1\26\3\0\17\26\1\134\5\26"+
    "\22\0\1\26\6\0\1\26\3\0\11\26\1\135\13\26"+
    "\22\0\1\26\6\0\1\26\3\0\13\26\1\136\11\26"+
    "\22\0\1\26\6\0\1\26\3\0\16\26\1\137\6\26"+
    "\22\0\1\26\6\0\1\26\3\0\13\26\1\140\11\26"+
    "\22\0\1\26\6\0\1\26\3\0\15\26\1\141\7\26"+
    "\22\0\1\26\6\0\1\26\3\0\12\26\1\142\12\26"+
    "\22\0\1\26\6\0\1\26\3\0\11\26\1\143\13\26"+
    "\22\0\1\26\6\0\1\26\3\0\7\26\1\144\15\26"+
    "\22\0\1\26\6\0\1\26\3\0\20\26\1\145\4\26"+
    "\22\0\1\26\6\0\1\26\3\0\15\26\1\146\7\26"+
    "\22\0\1\26\6\0\1\26\3\0\7\26\1\147\15\26"+
    "\22\0\1\26\6\0\1\26\3\0\7\26\1\150\6\26"+
    "\1\151\6\26\22\0\1\26\6\0\1\26\3\0\21\26"+
    "\1\152\2\26\1\153\22\0\1\26\6\0\1\26\3\0"+
    "\16\26\1\154\6\26\22\0\1\26\6\0\1\26\3\0"+
    "\7\26\1\155\15\26\22\0\1\26\6\0\1\26\3\0"+
    "\1\156\24\26\22\0\1\26\6\0\1\26\3\0\4\26"+
    "\1\157\20\26\22\0\1\26\6\0\1\26\3\0\2\26"+
    "\1\160\22\26\22\0\1\26\6\0\1\26\3\0\17\26"+
    "\1\161\5\26\22\0\1\26\6\0\1\26\3\0\20\26"+
    "\1\162\4\26\22\0\1\26\6\0\1\26\3\0\1\163"+
    "\24\26\22\0\1\26\6\0\1\26\3\0\4\26\1\164"+
    "\20\26\22\0\1\26\6\0\1\26\3\0\17\26\1\165"+
    "\5\26\22\0\1\26\6\0\1\26\3\0\1\166\24\26"+
    "\22\0\1\26\6\0\1\26\3\0\4\26\1\167\20\26"+
    "\22\0\1\26\6\0\1\26\3\0\14\26\1\170\10\26"+
    "\22\0\1\26\6\0\1\26\3\0\1\26\1\171\23\26"+
    "\22\0\1\26\6\0\1\26\3\0\13\26\1\172\11\26"+
    "\22\0\1\26\6\0\1\26\3\0\21\26\1\173\3\26"+
    "\22\0\1\26\6\0\1\26\3\0\4\26\1\174\20\26"+
    "\22\0\1\26\6\0\1\26\3\0\20\26\1\175\4\26"+
    "\22\0\1\26\6\0\1\26\3\0\17\26\1\176\5\26"+
    "\22\0\1\26\6\0\1\26\3\0\14\26\1\177\10\26"+
    "\22\0\1\26\6\0\1\26\3\0\4\26\1\200\20\26"+
    "\22\0\1\26\6\0\1\26\3\0\11\26\1\201\13\26"+
    "\22\0\1\26\6\0\1\26\3\0\10\26\1\202\14\26"+
    "\22\0\1\26\6\0\1\26\3\0\6\26\1\203\16\26"+
    "\22\0\1\26\6\0\1\26\3\0\17\26\1\204\5\26"+
    "\22\0\1\26\6\0\1\26\3\0\7\26\1\205\15\26"+
    "\22\0\1\26\6\0\1\26\3\0\21\26\1\206\3\26"+
    "\22\0\1\26\6\0\1\26\3\0\4\26\1\207\20\26"+
    "\22\0\1\26\6\0\1\26\3\0\11\26\1\210\13\26"+
    "\22\0\1\26\6\0\1\26\3\0\1\211\24\26\22\0"+
    "\1\26\6\0\1\26\3\0\16\26\1\212\6\26\22\0"+
    "\1\26\6\0\1\26\3\0\3\26\1\213\21\26\22\0"+
    "\1\26\6\0\1\26\3\0\20\26\1\214\4\26\22\0"+
    "\1\26\6\0\1\26\3\0\16\26\1\215\6\26\22\0"+
    "\1\26\6\0\1\26\3\0\16\26\1\216\6\26\22\0"+
    "\1\26\6\0\1\26\3\0\2\26\1\217\22\26\22\0"+
    "\1\26\6\0\1\26\3\0\23\26\1\220\1\26\22\0"+
    "\1\26\6\0\1\26\3\0\4\26\1\221\20\26\22\0"+
    "\1\26\6\0\1\26\3\0\13\26\1\222\11\26\22\0"+
    "\1\26\6\0\1\26\3\0\11\26\1\223\13\26\22\0"+
    "\1\26\6\0\1\26\3\0\11\26\1\224\13\26\22\0"+
    "\1\26\6\0\1\26\3\0\2\26\1\225\22\26\22\0"+
    "\1\26\6\0\1\26\3\0\20\26\1\226\4\26\22\0"+
    "\1\26\6\0\1\26\3\0\1\227\24\26\22\0\1\26"+
    "\6\0\1\26\3\0\13\26\1\230\11\26\22\0\1\26"+
    "\6\0\1\26\3\0\6\26\1\231\16\26\22\0\1\26"+
    "\6\0\1\26\3\0\21\26\1\232\3\26\22\0\1\26"+
    "\6\0\1\26\3\0\20\26\1\233\4\26\22\0\1\26"+
    "\6\0\1\26\3\0\24\26\1\234\22\0\1\26\6\0"+
    "\1\26\3\0\6\26\1\235\16\26\22\0\1\26\6\0"+
    "\1\26\3\0\4\26\1\236\20\26\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5250];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\2\11\2\1\1\11\1\1\1\11"+
    "\2\1\2\11\3\1\1\11\1\1\2\11\20\1\4\11"+
    "\1\0\1\11\1\0\4\11\1\1\1\11\1\0\3\11"+
    "\145\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public MloxLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MloxLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return MloxTokenTypes.BAD_CHARACTER;
            }
          // fall through
          case 67: break;
          case 2:
            { return MloxTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 68: break;
          case 3:
            { return MloxTokenTypes.BANG;
            }
          // fall through
          case 69: break;
          case 4:
            { return MloxTokenTypes.MOD;
            }
          // fall through
          case 70: break;
          case 5:
            { return MloxTokenTypes.LEFT_PAREN;
            }
          // fall through
          case 71: break;
          case 6:
            { return MloxTokenTypes.RIGHT_PAREN;
            }
          // fall through
          case 72: break;
          case 7:
            { return MloxTokenTypes.STAR;
            }
          // fall through
          case 73: break;
          case 8:
            { return MloxTokenTypes.PLUS;
            }
          // fall through
          case 74: break;
          case 9:
            { return MloxTokenTypes.COMMA;
            }
          // fall through
          case 75: break;
          case 10:
            { return MloxTokenTypes.MINUS;
            }
          // fall through
          case 76: break;
          case 11:
            { return MloxTokenTypes.DOT;
            }
          // fall through
          case 77: break;
          case 12:
            { return MloxTokenTypes.SLASH;
            }
          // fall through
          case 78: break;
          case 13:
            { return MloxTokenTypes.NUMBER;
            }
          // fall through
          case 79: break;
          case 14:
            { return MloxTokenTypes.COLON;
            }
          // fall through
          case 80: break;
          case 15:
            { return MloxTokenTypes.EOL;
            }
          // fall through
          case 81: break;
          case 16:
            { return MloxTokenTypes.LESS;
            }
          // fall through
          case 82: break;
          case 17:
            { return MloxTokenTypes.ASSIGN;
            }
          // fall through
          case 83: break;
          case 18:
            { return MloxTokenTypes.GREATER;
            }
          // fall through
          case 84: break;
          case 19:
            { return MloxTokenTypes.QUESTION;
            }
          // fall through
          case 85: break;
          case 20:
            { return MloxTokenTypes.IDENTIFIER;
            }
          // fall through
          case 86: break;
          case 21:
            { return MloxTokenTypes.LEFT_SQUARE;
            }
          // fall through
          case 87: break;
          case 22:
            { return MloxTokenTypes.RIGHT_SQUARE;
            }
          // fall through
          case 88: break;
          case 23:
            { return MloxTokenTypes.LEFT_BRACE;
            }
          // fall through
          case 89: break;
          case 24:
            { return MloxTokenTypes.PIPE;
            }
          // fall through
          case 90: break;
          case 25:
            { return MloxTokenTypes.RIGHT_BRACE;
            }
          // fall through
          case 91: break;
          case 26:
            { return MloxTokenTypes.NOT_EQUAL;
            }
          // fall through
          case 92: break;
          case 27:
            { return MloxTokenTypes.STRING;
            }
          // fall through
          case 93: break;
          case 28:
            { return MloxTokenTypes.MOD_ASSIGN;
            }
          // fall through
          case 94: break;
          case 29:
            { return MloxTokenTypes.MUL_ASSIGN;
            }
          // fall through
          case 95: break;
          case 30:
            { return MloxTokenTypes.PLUS_ASSIGN;
            }
          // fall through
          case 96: break;
          case 31:
            { return MloxTokenTypes.MINUS_ASSIGN;
            }
          // fall through
          case 97: break;
          case 32:
            { return MloxTokenTypes.COMMENT;
            }
          // fall through
          case 98: break;
          case 33:
            { return MloxTokenTypes.DIV_ASSIGN;
            }
          // fall through
          case 99: break;
          case 34:
            { return MloxTokenTypes.LESS_EQUAL;
            }
          // fall through
          case 100: break;
          case 35:
            { return MloxTokenTypes.EQUAL;
            }
          // fall through
          case 101: break;
          case 36:
            { return MloxTokenTypes.GREAT_EQUAL;
            }
          // fall through
          case 102: break;
          case 37:
            { return MloxTokenTypes.DO;
            }
          // fall through
          case 103: break;
          case 38:
            { return MloxTokenTypes.IF;
            }
          // fall through
          case 104: break;
          case 39:
            { return MloxTokenTypes.IN;
            }
          // fall through
          case 105: break;
          case 40:
            { return MloxTokenTypes.OR;
            }
          // fall through
          case 106: break;
          case 41:
            { return MloxTokenTypes.AND;
            }
          // fall through
          case 107: break;
          case 42:
            { return MloxTokenTypes.FOR;
            }
          // fall through
          case 108: break;
          case 43:
            { return MloxTokenTypes.FUN;
            }
          // fall through
          case 109: break;
          case 44:
            { return MloxTokenTypes.NIL;
            }
          // fall through
          case 110: break;
          case 45:
            { return MloxTokenTypes.TRY;
            }
          // fall through
          case 111: break;
          case 46:
            { return MloxTokenTypes.VAR;
            }
          // fall through
          case 112: break;
          case 47:
            { return MloxTokenTypes.CASE;
            }
          // fall through
          case 113: break;
          case 48:
            { return MloxTokenTypes.ELSE;
            }
          // fall through
          case 114: break;
          case 49:
            { return MloxTokenTypes.THIS;
            }
          // fall through
          case 115: break;
          case 50:
            { return MloxTokenTypes.TRUE;
            }
          // fall through
          case 116: break;
          case 51:
            { return MloxTokenTypes.BREAK;
            }
          // fall through
          case 117: break;
          case 52:
            { return MloxTokenTypes.CATCH;
            }
          // fall through
          case 118: break;
          case 53:
            { return MloxTokenTypes.CLASS;
            }
          // fall through
          case 119: break;
          case 54:
            { return MloxTokenTypes.FALSE;
            }
          // fall through
          case 120: break;
          case 55:
            { return MloxTokenTypes.PRINT;
            }
          // fall through
          case 121: break;
          case 56:
            { return MloxTokenTypes.SUPER;
            }
          // fall through
          case 122: break;
          case 57:
            { return MloxTokenTypes.THROW;
            }
          // fall through
          case 123: break;
          case 58:
            { return MloxTokenTypes.WHILE;
            }
          // fall through
          case 124: break;
          case 59:
            { return MloxTokenTypes.IMPORT;
            }
          // fall through
          case 125: break;
          case 60:
            { return MloxTokenTypes.LAMBDA;
            }
          // fall through
          case 126: break;
          case 61:
            { return MloxTokenTypes.RETURN;
            }
          // fall through
          case 127: break;
          case 62:
            { return MloxTokenTypes.SWITCH;
            }
          // fall through
          case 128: break;
          case 63:
            { return MloxTokenTypes.DEFAULT;
            }
          // fall through
          case 129: break;
          case 64:
            { return MloxTokenTypes.FINALLY;
            }
          // fall through
          case 130: break;
          case 65:
            { return MloxTokenTypes.FOREACH;
            }
          // fall through
          case 131: break;
          case 66:
            { return MloxTokenTypes.CONTINUE;
            }
          // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
